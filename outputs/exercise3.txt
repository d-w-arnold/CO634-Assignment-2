THEHOURSDROPPEDPASTASTHEMOTIVE

Full Decrypted Plaintext for Exercise 3: THEHOURSDROPPEDPASTASTHEMOTIVEOFEACHACTINTHELONGSERIESOFBYGONEDAYSPRESENTEDITSELFTOHISVIEWHEPERCEIVEDHOWINTIMATELYTHENOTIONOFHAVINGTESSASADEARPOSSESSIONWASMIXEDUPWITHALLHISSCHEMESANDWORDSANDWAYSINGOINGHITHERANDTHITHERHEOBSERVEDINTHEOUTSKIRTSOFASMALLTOWNAREDANDBLUEPLACARDSETTINGFORTHTHEGREATADVANTAGESOFTHEEMPIREOFBRAZILASAFIELDFORTHEEMIGRATINGAGRICULTURISTLANDWASOFFEREDTHEREONEXCEPTIONALLYADVANTAGEOUSTERMSBRAZILSOMEWHATATTRACTEDHIMASANEWIDEATESSCOULDEVENTUALLYJOINHIMTHEREANDPERHAPSINTHATCOUNTRYOFCONTRASTINGSCENESANDNOTIONSANDHABITSTHECONVENTIONSWOULDNOTBESOOPERATIVEWHICHMADELIFEWITHHERSEEMIMPRACTICABLETOHIMHEREINBRIEFHEWASSTRONGLYINCLINEDTOTRYBRAZILESPECIALLYASTHESEASONFORGOINGTHITHERWASJUSTATHANDWITHTHISVIEWHEWASRETURNINGTOEMMINSTERTODISCLOSEHISPLANTOHISPARENTSANDTOMAKETHEBESTEXPLANATIONHECOULDMAKEOFARRIVINGWITHOUTTESSSHORTOFREV

For the Java source code used in the completion of Exercise 3, please refer to the supporting file(s):

VigDecrypt.java
Decrypt.java (abstract class)
App.java (main method)

Description:

Using a Java implementation, I would find out the most likely 6 character key using letter frequency analysis of the ciphertext, and then using that most likely key, I would repeat the methodology incorporated in Exercise 2.

1) The VigDecrypt.decrypt(int keyLen) method starts by calling the VigDecrypt.findKey(int keyLen) method, which starts by recording all the different groups of characters which fall under the same index character of the unknown length of key. For example:

(ciphertext) "SITRWAQTSBWVOFS..."

      (index) 012345012345012
              ↓↓↓↓↓↓
         Key: ??????

(set) =
0 = "SQOSLNZGRNMOS..." (these are all the characters which fall under index 0 of the key)
1 = "ITFBPGDFFGFSF..." (these are all the characters which fall under index 1 of the key)
2 = "TSSHITIAGQSTS..." (these are all the characters which fall under index 2 of the key)
3 = "RBZDSKSYSIKCS..." (these are all the characters which fall under index 3 of the key)
4 = "WWIPDKVVMOGMB..." (these are all the characters which fall under index 4 of the key)
5 = "AVYKKNZMYUYTY..." (these are all the characters which fall under index 5 of the key)

2) For each set of characters (sets 0-6 as seen above) which fall under the same index character in the key, I record the character for each character in the character alphabet, for each set. For example:

 (below is just the character count for set 0, same thing also done for sets 1-5)
 A -> 2
 B -> 3
 C -> 5
 D -> 13
 E -> 3
 F -> 2
 G -> 11
 H -> 16
 I -> 0
 J -> 0
 K -> 3
 L -> 5
 M -> 14
 N -> 10
 O -> 3
 P -> 0
 Q -> 7
 R -> 11
 S -> 15
 T -> 3
 U -> 0
 V -> 1
 W -> 0
 X -> 4
 Y -> 0
 Z -> 9

Then for each character count, in each set, we multiple each character count with its respective frequency (percentage) of occurring in the english language. For example:

(below is just the (character count * corresponding character frequency in english) for set 0, same thing also done for sets 1-5)
A -> 0.014285714285714285
B -> 0.02142857142857143
C -> 0.03571428571428571
D -> 0.09285714285714286
E -> 0.02142857142857143
F -> 0.014285714285714285
G -> 0.07857142857142857
H -> 0.11428571428571428
I -> 0.0
J -> 0.0
K -> 0.02142857142857143
L -> 0.03571428571428571
M -> 0.1
N -> 0.07142857142857142
O -> 0.02142857142857143
P -> 0.0
Q -> 0.05
R -> 0.07857142857142857
S -> 0.10714285714285714
T -> 0.02142857142857143
U -> 0.0
V -> 0.007142857142857143
W -> 0.0
X -> 0.02857142857142857
Y -> 0.0
Z -> 0.06428571428571428

3) Once we have this information, we then can determine what the most likely letter for each index of the key will be. We do this by taking each of the 6 sets containing the (character count * corresponding character frequency in english), and multiplying again by character frequency in english, but we do this in 26 variations (one for each character in the character alphabet), with each variation offsetting the letter frequencies to the (character count * corresponding character frequency in english) set values by 1. For example:

(demonstrating with the first 5 entries in set 0)

(variation 1, offset = 0)
   A -> 0.014285714285714285 * 8.167  (character 'A' frequency in english)
   B -> 0.02142857142857143  * 1.492  (character 'B' frequency in english)
   C -> 0.03571428571428571  * 2.782  (character 'C' frequency in english)
   D -> 0.09285714285714286  * 4.253  (character 'D' frequency in english)
   E -> 0.02142857142857143  * 12.702 (character 'E' frequency in english)
   ...
   ----------------------------------
                     total : ???????

(variation 2, offset = 1)
   A -> 0.014285714285714285 * 0.074  (character 'Z' frequency in english)
   B -> 0.02142857142857143  * 8.167  (character 'A' frequency in english)
   C -> 0.03571428571428571  * 1.492  (character 'B' frequency in english)
   D -> 0.09285714285714286  * 2.782  (character 'C' frequency in english)
   E -> 0.02142857142857143  * 4.253  (character 'D' frequency in english)
   ...
   ----------------------------------
                     total : ???????

(variation 3, offset = 2)
   A -> 0.014285714285714285 * 1.974  (character 'Y' frequency in english)
   B -> 0.02142857142857143  * 0.074  (character 'Z' frequency in english)
   C -> 0.03571428571428571  * 8.167  (character 'A' frequency in english)
   D -> 0.09285714285714286  * 1.492  (character 'B' frequency in english)
   E -> 0.02142857142857143  * 2.782  (character 'C' frequency in english)
   ...
   ----------------------------------
                     total : ???????

Having done this for all possible offsets in set 0, if we compared the totals of the ((character count * corresponding character frequency in english) * the offset letter frequency) for all entries in a variation, whichever variation yielded the greatest total would be the most likely letter for that index of the key. For example:

(the totals for all offsets of set 0)
0 = 4.208678571428571
1 = 3.0104285714285712
2 = 3.1723142857142856
3 = 4.611828571428571
4 = 3.863771428571428
5 = 3.671742857142857
...
24 = 4.115378571428571
25 = 6.615942857142858 (* this is the highest total)

This means that the first character of the 6 character key is likely to be the 26th character in our character alphabet, which would be the character 'Z'.

4) Having repeated step 3) for all sets 0-6, we'd end up with all 6 most likely characters making up our 6 character key:

(set 0) = 'Z'
(set 1) = 'B'
(set 2) = 'P'
(set 3) = 'K'
(set 4) = 'I'
(set 5) = 'G'

"ZBPKIG" (is the most likely 6 character key using letter frequency analysis of the ciphertext)

5) Lastly, I would use this found 6 character key in the same way I used a known key in Exercise 2. After decryption using the 6 character key, if tess26.txt contains the plaintext, we know the decryption was successful.